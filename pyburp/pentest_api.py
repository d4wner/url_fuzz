#coding=utf-8
from burp import IBurpExtender
from burp import IContextMenuFactory
from burp import IBurpExtenderCallbacks
from burp import IContextMenuInvocation
from burp import IHttpRequestResponse
from burp import ITextEditor
from javax.swing import JMenuItem
from javax.swing import JMenu
import subprocess
from java.util import ArrayList
from java.awt.event import ActionListener
from burp import IContextMenuInvocation
from burp import IContextMenuInvocation

import urllib2
import urllib

print '[+]Install successed!\n'


class ActionHandler(ActionListener):

	def __init__(self, callbacks, menu_name, helper):
		self.callbacks = callbacks
		#self.invocations = invocations
		self.menu_name = menu_name
		self._helpers = helper



	def actionPerformed(self, actionEvent):
		self.send_resp()

	def send_resp(self):

		messageInfo = invocations.getSelectedMessages()[0]


		#for line in messageInfo.getRequest().tostring().splitlines():
		request = messageInfo.getRequest()
		analyzedResponse = self._helpers.analyzeRequest(request)
		headers = analyzedResponse.getHeaders()
		req_url = str(messageInfo.getUrl())

		headers = analyzedResponse.getHeaders()
		for header in headers:
			if header.startswith("Cookie: "):
				cookie = header[8:]


		#cookie,url,selected_textï¼Œdetect_type
		start, end = invocations.getSelectionBounds()
		message = invocations.getSelectedMessages()[0].getRequest()
		selected_text = self._helpers.bytesToString(message)[start:end]
		print "[+]selected_text:"+selected_text
		print "[+]cookie:" + cookie
		print "[+]req_url:" + req_url
		print "[+]detect_type:" + self.menu_name

		print '[+]Start to sending to proxy...'

		posturl = 'http://127.0.0.1:8776/server.py'
		data = {'url': req_url,'cookie':cookie,'specific_para':selected_text,'detect_type':self.menu_name}
		req = urllib2.Request(posturl)
		data = urllib.urlencode(data)
		opener = urllib2.build_opener()
		response = opener.open(req, data).read()
		print '[+]Sending ended...'






class BurpExtender(IBurpExtender, IContextMenuFactory, ITextEditor, IContextMenuInvocation):

	items = ['xss_detect','url_redirect','file_download','file_read','pass_by']


	def registerExtenderCallbacks(self, callbacks):
		self._actionName = "Vuln_Detect"
		self._helers = callbacks.getHelpers()
		self._callbacks = callbacks
		#self._helper = callbacks.getHelpers()
		callbacks.setExtensionName("Vuln_Detect")
		callbacks.registerContextMenuFactory(self)

		self.menuitems = dict()
		self.generate_menu_items()


		return 


	def createMenuItems(self, invocation):
		global invocations
		invocations = invocation

		menuItemList = ArrayList()
		#self._contextMenuData = contextMenuInvocation.getSelectedMessages()
		submenu = JMenu(self._actionName)

		for menuitem in sorted(self.menuitems):
			submenu.add(menuitem)
		menuItemList.add(submenu)

		return menuItemList


	def generate_menu_items(self):

		for k in self.items:
			#print k + '\n'
			#menuitem = JMenuItem(k, actionPerformed=self.menuItemClicked)
			menuitem = JMenuItem(k)

			#menu.append(JMenuItem(self._actionName, None , actionPerformed= lambda x, inv=invocation: self.sqlMapScan(inv)))
			menuitem.addActionListener(ActionHandler(self._callbacks, k, self._helers))

			self.menuitems[menuitem] = k


